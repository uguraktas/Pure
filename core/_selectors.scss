/*----------------------------------------------------------------------------------------------*/
/*  PURE SCSS LIBRARY                                                                           */
/*----------------------------------------------------------------------------------------------*/
/*                                                                                              */
/*  Name    :   Selectors                                                                       */
/*  Version :   1.0.0                                                                           */
/*  Git     :   https://github.com/TuruncuInternetSolutions/pure.git                            */
/*                                                                                              */
/*  by Turuncu Internet Solutions                                                               */
/*  www.turuncuweb.net                                                                          */
/*                                                                                              */
/*----------------------------------------------------------------------------------------------*/
/*
 .tabs {
     .tab {
         background: red;
         &:hover {
             background: white;
         }
         .tab-link {
             color: white;
             @include pure-select-context('.tab', '.tab:hover') {
                 color: red;
             }
         }
     }
 }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin pure-select-context($old-context, $new-context) {
    @at-root #{selector-replace(&, $old-context, $new-context)} {
        @content;
    }
}
/*----------------------------------------------------------------------------------------------*/
/*
 .tab {
 	background: red;

     &:hover {
     	background: white;
     }

   	.tab-link {
     	color: white;

         @include pure-select-parent-state(':hover', '.active') {
         	color: pink;
         }
 	}
 }
*/
@mixin pure-select-parent-state($states...) {
    $parent: nth(nth(&, 1), (length(nth(&, 1))-1));

    @each $state in $states {
        @at-root #{selector-replace(&, $parent, ($parent#{$state}))} {
            @content;
        }
    }
}
/*----------------------------------------------------------------------------------------------*/
/*
 .icon-toggle {
   width: 1.56em;
   height: 0.75em;
   position: relative;
   display: inline-block;
   border-top: solid .125em #60666c;

   @include pure-select-pseudo-elements(before, 1.56em, .125em) {
     background: #888c91;
     top: .25em;
   }
   @include pure-select-pseudo-elements(after, 1.56em, .125em) {
     background: #afb3b5;
     bottom: 0;
   }
 }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin pure-select-pseudo-elements($el,$el-width,$el-height) {
    @if $el == "before" or $el == "after" {
        &:#{$el} {
            content: "";
            position: absolute;
            width: $el-width;
            height: $el-height;
            @content;
        }
    }
    @else {
        @warn "`#{$el}` is not a valid pseudo-element.";
    }
}
/*----------------------------------------------------------------------------------------------*/
/*
 .nav-menu {
   li {
     float: left;
     a {
       color: blue;
       @include parent-hover {
         color: purple;
       }
     }
     .sub-menu {
       display: none;
       @include parent-hover {
         display: block;
       }
     }
   }
 }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin pure-select-parent-hover() {
    $selector: &;

    @each $list in & {
        $parent: nth($list,length($list)-1);
        $selector: selector-replace($selector,$parent,$parent+':hover');
    }

    @at-root #{$selector} {
        @content;
    }
}
/*----------------------------------------------------------------------------------------------*/
/*
 .a .b, .a .c {
   @include pure-select-parent-nth-status(1, ':hover', suffix) {
     color: red;
   }
   @include pure-select-parent-nth-status(1, '.en', prepend) {
     color: green;
   }
   @include pure-select-parent-nth-status(-2, '.target', append) {
     colore: blue;
   }
 }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin pure-select-parent-nth-status($index, $status, $place: suffix) {
    $func-name: parent-nth-status;
    $new-selectors: ();
    $selectors: &;

    $status: unquote($status);
    $place: unquote($place);

    @if not $selectors {
        @error "#{$func-name} should not at root!";
    }

    @if not $status or $status == "" {
        @error "#{$func-name} parameter $status error";
    }

    @each $selector in $selectors {
        $len: length($selector);
        $index: if($index < 0, $len + $index + 1, $index);
        $result: ();

        @for $i from 1 through $len {
            $item: nth($selector, $i);

            @if $i == $index {
                @if $place == suffix {
                    $result: $item + $status;
                }
                @else if $place == prefix {
                    $result: $status + $item;
                }
                @else if $place == prepend {
                    $result: append($status, $item);
                }
                @else if $place == append {
                    $result: append($item, $status);
                }
            }
            @else {
                $result: append($result, $item);
            }
        }

        $new-selectors: append($new-selectors, $result, comma);
    }

    @at-root #{$new-selectors} {
        @content;
    }
}
/*----------------------------------------------------------------------------------------------*/
/*
 .tab {
   a {
     display: inline-block;
     padding: 10px 60px;
     cursor: pointer;

     &:hover {
       background: #AAA;
     }

     i {
       margin-left: 10px;

       @include parent-status(':hover') { color: red; }

       @include parent-status('.home-link') { background: blue; }

       @include parent-status('.about-link') { background: green; }
     }
   }
 }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin pure-select-parent-status($status, $place: suffix) {
    @include pure-select-parent-nth-status(-2, $status, $place) {
        @content;
    }
}



/*----------------------------------------------------------------------------------------------*/
/*
    教程：http://alistapart.com/article/quantity-queries-for-css
    quantity-queries SCSS:https://github.com/danielguillan/quantity-queries/blob/master/stylesheets/_quantity-queries.scss
    Demo: http://codepen.io/danielguillan/pen/GgBOxm
*/
/*----------------------------------------------------------------------------------------------*/
/*  1. Last Simple Selector */
/*----------------------------------------------------------------------------------------------*/
/*
    Find the last simple selector in a given selector
    @access private
    @param  {list | string} $selector - A single selector
    @return {string}                  - The last simple selector in $selector
    @example scss
    $result: _last-simple-selector(ul > li); // li
*/
/*----------------------------------------------------------------------------------------------*/
@function _last-simple-selector($selector) {
    $parsed: selector-parse($selector);

    @if length($parsed) > 1 {
        @error '`#{$selector}` contains #{length($parsed)} selectors and the `_last-simple-selector()`function accepts only 1.';
    }

    $last-simple-selector: nth(nth($parsed, 1), -1);

    @return $last-simple-selector;
}
/*----------------------------------------------------------------------------------------------*/
/*  2. Build Quantity Selector  */
/*----------------------------------------------------------------------------------------------*/
/*
    Builds the selector for the quantity query
    @access private
    @param  {string} $selector-append      - The selector to be appended
    @param  {string} $last-selector        - The item's selector
    @return {list}                         - The final quantity query selector
*/
/*----------------------------------------------------------------------------------------------*/
@function _build-quantity-selector($selector-append, $last-selector) {
    $quantity-selector: ();

    @each $s in & {
        $last-simple-selector: '~' + if($last-selector, $last-selector, _last-simple-selector($s));
        $sel: selector-append($s, $selector-append);
        $sel2: selector-nest($sel, $last-simple-selector);
        $quantity-selector: append($quantity-selector, $sel, 'comma');
        $quantity-selector: append($quantity-selector, $sel2, 'comma');
    }

    @return $quantity-selector;
}
/*----------------------------------------------------------------------------------------------*/
/*  2. At least  */
/*----------------------------------------------------------------------------------------------*/
/*
    Query when total items is at least N items
    @param  {number} $count - Quantity to match (equal or more)
    @example scss - Make the items color red when there are 4 items or more
      ul li {
        @include at-least(4) { color: red; }
      }
    @example scss - Make the items color blue when there are 6 items or more and use '*' (element agnostic) as the item selector
      ul li {
        @include at-least(6, '*') { color: blue; }
      }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin at-least($count, $selector: null) {
    $selector-append: ':nth-last-child(n+#{$count})';

    @if type-of($count) != 'number' or not unitless($count) or $count < 1 {
        @error '`#{$count}` is not a valid number for `at-least`';
    }

    @if $selector != null and (type-of($selector) != 'string' or length($selector) > 1) {
        @error '`#{$selector}` is not a valid selector for `at-least`';
    }

    $at-least-selector: _build-quantity-selector($selector-append, $selector);


    @at-root #{$at-least-selector} {
        @content;
    }
}
/*----------------------------------------------------------------------------------------------*/
/*  4. At most  */
/*----------------------------------------------------------------------------------------------*/
/*
    Query when total items is at most N items
    @param  {number} $count - Quantity to match (equal or less)
    @example scss - Make the items color red when there are 4 items or less
      ul li {
        @include at-most(4) { color: red; }
      }
    @example scss - Make the items color blue when there are 6 items or less and use '*' (element agnostic) as the item selector
      ul li {
        @include at-most(6, '*') { color: blue; }
      }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin at-most($count, $selector: null) {
    $selector-append: ':nth-last-child(-n+#{$count}):first-child';

    @if type-of($count) != 'number' or not unitless($count) or $count < 1 {
        @error '`#{$count}` is not a valid number for `at-most`.';
    }

    @if $selector != null and (type-of($selector) != 'string' or length($selector) > 1) {
        @error '`#{$selector}` is not a valid selector for `at-most`';
    }

    $at-most-selector: _build-quantity-selector($selector-append, $selector);


    @at-root #{$at-most-selector} {
        @content;
    }
}
/*----------------------------------------------------------------------------------------------*/
/*  5. Between  */
/*----------------------------------------------------------------------------------------------*/
/*
    Query when total items is at least X items and at most Y items
    @param  {number} $at-least - Lower quantity of items to match
    @param  {number} $at-most - Higher quantity of items to match
    @example scss - Make the items color red when there are at least 2 and at most 4 items
      ul li {
        @include between(4, 8) { color: red; }
      }
    @example scss - Make the items color blue when there are at least 6 items and at most 10 items and use '*' (element agnostic) as the item selector
      ul li {
        @include between(6, 10, '*') { color: blue; }
      }
*/
/*----------------------------------------------------------------------------------------------*/
@mixin between($first, $last, $selector: null) {
    $selector-append: ':nth-last-child(n+#{$first}):nth-last-child(-n+#{$last}):first-child';

    @if type-of($first) != 'number' or not unitless($first) or $first < 1 {
        @error '`#{$first}` is not a valid number for `between`';
    }

    @if type-of($last) != 'number' or not unitless($last) or $last < 1 {
        @error '`#{$last}` is not a valid number for `between`';
    }

    @if $first > $last {
        @error '#{$first} can´t be larger that #{$last} for `between`';
    }

    @if $selector != null and (type-of($selector) != 'string' or length($selector) > 1) {
        @error '`#{$selector}` is not a valid selector for `between`';
    }

    $between-selector: _build-quantity-selector($selector-append, $selector);


    @at-root #{$between-selector} {
        @content;
    }
}
/*----------------------------------------------------------------------------------------------*/
/*  6. Exactly  */
/*----------------------------------------------------------------------------------------------*/
/*
    Query when total items is exactly N items
    @param  {number} $count - Quantity to match (equal)
    @example scss - Make the items color red when there are exactly 4 items
      ul li {
        @include exactly(4) { color: red; }
      }
    @example scss - Make the items color blue when there are exactly 6 items and use '*' (element agnostic) as the item selector
      ul li {
        @include exactly(6, '*') { color: blue; }
      }
*/
@mixin exactly($count, $selector: null) {
    $selector-append: ':nth-last-child(#{$count}):first-child';

    @if type-of($count) != 'number' or not unitless($count) or $count < 1 {
        @error '`#{$count}` is not a valid number for `exactly`';
    }

    @if $selector != null and (type-of($selector) != 'string' or length($selector) > 1) {
        @error '`#{$selector}` is not a valid selector for `exactly`';
    }

    $exactly-selector: _build-quantity-selector($selector-append, $selector);


    @at-root #{$exactly-selector} {
        @content;
    }
}



/*----------------------------------------------------------------------------------------------*/
/*  MISCS  */
/*----------------------------------------------------------------------------------------------*/
@mixin first($num) {

    @if $num == 1 {
        &:first-child {
            @content;
        }
    }

    @else {
        &:nth-child(-n + #{$num}) {
            @content;
        }
    }
}

@mixin last($num) {
    &:nth-last-child(-n + #{$num}) {
        @content;
    }
}

@mixin after-first($num) {
    &:nth-child(n+#{$num + 1}) {
        @content;
    }
}

@mixin from-end($num) {
    &:nth-last-child(#{$num}) {
        @content;
    }
}

@mixin between($first,$last) {
    &:nth-child(n+#{$first}):nth-child(-n+#{$last}) {
        @content;
    }
}

@mixin even-between($first,$last) {
    &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

@mixin odd-between($first,$last) {
    &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

@mixin n-between($num,$first,$last) {
    &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
        @content;
    }
}

@mixin all-but($num) {
    &:not(:nth-child(#{$num})) {
        @content;
    }
}

@mixin each($num) {
    &:nth-child(#{$num}n) {
        @content;
    }
}

@mixin every($num) {
    @include each($num) {
        @content;
    }
}

@mixin from-first-last($num) {
    &:nth-child(#{$num}),
    &:nth-last-child(#{$num}) {
        @content;
    }
}

@mixin middle($num) {
    &:nth-child(#{round($num/2)}) {
        @content;
    }
}

@mixin all-but-first-last($num) {
    &:nth-child(n+#{$num}):nth-last-child(n+#{$num}) {
        @content;
    }
}

@mixin first-of($limit) {
    &:nth-last-child(#{$limit}):first-child {
        @content;
    }
}

@mixin last-of($limit) {
    &:nth-of-type(#{$limit}):nth-last-of-type(1) {
        @content;
    }
}

@mixin at-least($num) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);

    &:nth-last-child(n + #{$num}),
    &:nth-last-child(n + #{$num}) ~ #{$child} {
        @content;
    }
}

@mixin at-most($num) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);

    &:nth-last-child(-n + #{$num}):first-child,
    &:nth-last-child(-n + #{$num}):first-child ~ #{$child} {
        @content;
    }
}

@mixin in-between($min, $max) {
    $selector: &;
    $child: nth(nth($selector, -1), -1);

    &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,
    &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {
        @content;
    }
}

@mixin child-index($num, $direction: 'forward', $index: 0) {
    @for $i from 1 through $num {
        @if $direction == 'forward' {
            &:nth-child(#{$i}) {
                z-index: orderIndex($i, $index, $direction);
                @content;
            }
        }

        @if $direction == 'backward' {
            &:nth-last-child(#{$i}) {
                z-index: orderIndex($i, $index, $direction);
                @content;
            }
        }
    }
}

@mixin select-range($start, $end) {
    &:nth-child(n+#{$start}):nth-child(-n+#{$end}) {
        @content;
    }
}

@mixin mod-list($mod, $remainder) {
    &:nth-last-child(#{$mod}n+#{$remainder}):first-child,
    &:nth-last-child(#{$mod}n+#{$remainder}):first-child ~ & {
        @content;
    }
}

@function orderIndex($i, $index, $direction) {
    @if $direction == 'forward' {
        $i: $index + $i;
    }
    @else {
        $i: $index - $i;
    }

    @return $i;
}
